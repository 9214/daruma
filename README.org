* About
*daruma* is:
- a pun on /Dar-kr-oom/;
- Japanese /Red/ doll - a talisman that brings luck and happiness (i.e. 100% game completion);
- a tiny little tool I wish existed back in my childhood.

Maybe you didn't know up until this moment, but there's *Beyond Good & Evil* videogame, and there's collectible items in this game. There's also one /special/ collectible (MDisk #13), and there's *no* in-game way you can get it. 

What *daruma* tries to do is to solve this (dare I say /problem/?) in an old-fashioned way. There's a [[https://9214.github.io/13][developement post]] which explains all of the stuff in a great detail.

* Installation
** From release archive
Grab [[https://github.com/9214/daruma/releases/latest][latest release]] for your platform and you're all set.

*Please note* that only Win version was tested, and MacOS bundle just cross-compiled. For Linux folks - sorry guys, GTK graphical backend is a work-in-progress, hence no GUI and executable. Either use Wine or other fan-made implementations.

** From source
- *prerequisite:* Internet connection;
- download [[http://www.red-lang.org/p/download.html][Red toolchain]] ([[http://red.github.io/#download][mirror]]);
- fork or download this repo;
- create a ~.config~ file in downloaded (and unpacked) directory in the following format:
#+BEGIN_SRC red
red: "<path/to/red/toolchain/in/system/specific/format>"
opt: "<compilation options (call toolchain with --help flag to list them)>"
#+END_SRC
example:
#+BEGIN_SRC red
red: "/home/user/dev/red/red-latest"
opt: "-c -t WindowsXP -o /home/user/daruma"
#+END_SRC

- call toolchain with ~--cli~ flag and:
#+BEGIN_SRC red
>> cd %/red/file/path/to/daruma/dir/
>> do %make.red
== OK
>> compile
#+END_SRC
- that's it, compiled binary should be in a root/specified directory.

* Usage
Carefully examine this terms:
- *you* :: a person who have the game installed and obviously knows why (s)he's doing what (s)he's doing;
- *gamedir* ::  directory containing /at least one/ BG&E savegame (i.e. ~slot[0-4].sav~ file);
- *daruma* :: tiny executable you either baked yourself or grabbed from release archive.

Good. Now, *daruma* can work in two modes as described below.

** Picklock
If *you* place *daruma* in a *gamedir* and launch it, it will /silently/ patch all of the save files. After that, to unlock the infamous Akuda closet you simply need to load one of the patched saves, access keypad and press /Validate/.

** Decoder 
If *you* launch *daruma* in any other directory that /doesn't looks like/ *gamedir* (i.e. doesn't contain any of the save files), a tiny window will pop up for you to enter 16-character Internet code. Well, just do it and hit Enter. Then, if everything is fine, write-down decoded locker code and use it to grab 13th MDisk.

* Contributing
Even though codebase is miniscule, there're a few things to do for those who are new to programming and open source. Don't be shy and consult [[./CONTRIBUTING.org][CONTRIBUTING]] file for details.

* Repo structure
- ~src/~ :: main directory with all scripts;
- ~tb/~ :: testing data and crude tests for decoder;
- ~msc/~ :: miscellaneous files and resources (mainly original disassembly dump, app's icon and macro for save harvesting);
- ~make.red~ :: "makefile" for debugging/releasing.

* API
Two words are exposed into global context:
- ~decode~ :: takes a valid Internet code, decodes it and spits out ~object!~ with game stats (locker code included), otherwise returns an error as ~issue!~ value.
- ~unlock~ :: patches all savefiles in current directory; if none is found, returns ~none~.

* License
Peace out.

/-- Happy hunting!/
